from aiogram import types, Dispatcher
from create_bot import dp, bot 
from keyboards import start_button, kb_client, kb_admin, kb_time, time_min, time_min2, time_min3, time_min4, time_min5, time_min6, time_min7, time_min8, time_min9, Rtime_min10, \
Rtime_min11, Rtime_min12, Rtime_min13, Rtime_min14, Rtime_min15, Rtime_min16, Rtime_min17, Rtime_min18, Rtime_min19, time_min20, time_min21, time_min22, time_min23, time_min00, choise_user_keyboard
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message, InputFile
from data_base import sqlite_db
import asyncio
from aiogram_calendar import simple_cal_callback, SimpleCalendar, dialog_cal_callback, DialogCalendar
import datetime
import time

#–¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
now = datetime.datetime.now()

#–º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup


#–∫–ª–∞—Å—Å –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class FSMReg(StatesGroup):
	name = State()

#–∫–ª–∞—Å—Å –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–º–µ–Ω—ã –∞–¥–º–∏–Ω —Å—Ç–∞—Ç—É—Å–∞
class FSMAdmstat(StatesGroup):
	status_sum = State()

#–∫–ª–∞—Å—Å –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
class FSMNewLesson(StatesGroup):
	callendar = State()
	clock = State()

#–∫–ª–∞—Å—Å –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
class FSMTime(StatesGroup):
	timer = State()

#–∫–ª–∞—Å—Å –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
class FSMPic1(StatesGroup):
	status_sum = State()

#–∫–ª–∞—Å—Å –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
class FSMPay_cost(StatesGroup):
	cost = State()

#–∫–ª–∞—Å—Å –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
class FSMPay_cost_group(StatesGroup):
	cost = State()


#–∫–ª–∞—Å—Å –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
class FSMPayment_new(StatesGroup):
	symma = State()
	file = State()


#–∫–ª–∞—Å—Å –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–µ–∫–∞
class FSMCheckList(StatesGroup):
	num = State()


class FSMRedactorLes(StatesGroup):
	num = State()


class FSMRedTimer(StatesGroup):
	num = State()
	com = State()

class FSMCheck_pay(StatesGroup):
	sym = State()

class FSMChangePayw(StatesGroup):
	first = State()

class FSMch_p_vz(StatesGroup):
	vznos = State()

class FSMch_pr_check(StatesGroup):
	check = State()

class FSMzapros_red_pay(StatesGroup):
	zapros = State()


#Admin

class FSMAdmChoiceYch(StatesGroup):
	user = State()

class FSMAdmMesYch(StatesGroup):
	user = State()

class FSMAnswerAdminMessage(StatesGroup):
	user = State()


#registration and join - (1)


async def commands_start(message : types.Message):
	await bot.send_photo(chat_id=message.from_user.id, photo=sqlite_db.sql_start_pic()[0], caption='–ï—Å–ª–∏ –≤—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ. \n \n–ï—Å–ª–∏ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–≤–æ–π—Ç–∏".', reply_markup=start_button)



async def callback_registr(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚úÖ', callback_data="got")))
	if sqlite_db.sql_prov_reg(call.from_user.id) == '':
		await FSMReg.name.set()
		await bot.send_message(chat_id=call.from_user.id, text='–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –≤–≤–µ–¥–∏—Ç–µ\n—Å–≤–æ–µ –§–ò–û –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: \n\n*(–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)*üìç', parse_mode="Markdown")
	else:
		r = str(sqlite_db.sql_prov_reg(call.from_user.id))
		await bot.send_message(call.from_user.id, text=f'{(str(r)[2:-3]).split()[1]}, –≤—ã –∏ —Ç–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ–µ –∏–º—è,\n–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ\n–ø–æ–¥ —ç—Ç–∏–º –∏–º–µ–Ω–µ–º.', \
			reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–í–æ–π—Ç–∏', callback_data="join")).add(InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data="change_name")))


async def load_name(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['user_id'] = message.from_user.id
		data['name'] = message.text
		data['clock'] = 'REG'
		data['callendar'] = 'no'
		data['status_sum'] = 'USER'
	await sqlite_db.sql_add_name(state)
	await state.finish()
	if len(str(sqlite_db.sql_prov_reg(message.from_user.id)).split()) < 3:
		await message.answer ('–≤–∞—à–µ –∏–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n–ü—Ä–∏–¥–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.\n\n(—á–∏—Ç–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ!)', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞ >>>', callback_data="yes_change")))
	else:
		await message.answer('–≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–í–æ–π—Ç–∏', callback_data="join")))


async def callback_join(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚úÖ', callback_data="join_da1")))
	r = str(sqlite_db.sql_prov_reg(call.from_user.id))
	if r == '':
		await bot.send_message(call.from_user.id, text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã :(', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data="registration")))
	else:
		if sqlite_db.sql_adm_check(call.from_user.id) == 1:
			await bot.send_message(chat_id=call.from_user.id, reply_markup=kb_admin, text=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {(str(r)[2:-3]).split()[1]}! \n \
				\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è —Å–æ —Å–≤–æ–∏–º —É—á–µ–Ω–∏–∫–∞–º–∏, \n—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –æ–ø–ª–∞—Ç—ã!')
		else:
			await bot.send_message(chat_id=call.from_user.id, reply_markup=kb_client, text=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {(str(r)[2:-3]).split()[1]}! \n \
				\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è —Å–æ —Å–≤–æ–∏–º —É—á–∏—Ç–µ–ª–µ–º, \n—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∏ –æ—Ç–º–µ—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã, \n–ø—Ä–∏–∫—Ä–µ–ø–ª—è—è —á–µ–∫–∏ –∏–∑ —Ç–≤–æ–µ–≥–æ –æ–Ω–ª–∞–π–Ω –±–∞–Ω–∫–∞!')
			sqlite_db.help_payment(call.from_user.id)


async def callback_change_name(message: Message):
	await bot.send_message(message.from_user.id, text='–í–∞—à–µ —Å—Ç–∞—Ä–æ–µ –∏–º—è —É–¥–∞–ª–∏—Ç—å—Å—è –∏ –ø—Ä–∏–¥–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤—ã —É–≤–µ—Ä–µ–Ω—ã?\n(–Ω–æ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω—ã–µ —Ç—É—Ç –≤–∞—à–∏ –∑–∞–Ω—è—Ç–∏—è –∏ –æ–ø–ª–∞—Ç—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –ø–æ–¥ —Å—Ç–∞—Ä—ã–º –∏–º–µ–Ω–µ–º).',\
	 reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–£–≤–µ—Ä–µ–Ω(–∞)', callback_data="yes_change")).add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data="registration")))


async def callback_yver_change_name(message: Message):
	await sqlite_db.sql_delite_name(message.from_user.id)
	await bot.send_message(message.from_user.id, text='–í–∞—à–µ —Å—Ç–∞—Ä–æ–µ –∏–º—è —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data="registration")))



#admin panel - (2)

async def my_students(message : types.Message):
	res = sqlite_db.sql_my_students(message.from_user.id)
	if str(res[0])[2:-3] == 'ADMIN':
		stud_list = []
		count = 0
		for i in res[1]:
			count += 1
			stud_list.append([InlineKeyboardButton(text=f'{count}. {str(i)[2:-3]}', callback_data=str(i)[2:-3])])
			if len(res[1]) == count:
				if res[2] == 1:
					stud_list.append([InlineKeyboardButton(text=f'–í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ üîπ', callback_data='sled_stud'), InlineKeyboardButton(text=f'–î–æ–ª–∂–Ω–∏–∫–∏ üò°', callback_data='dolg')])
					stud_list.append(([InlineKeyboardButton(text=f' ', callback_data='nnpp'), InlineKeyboardButton(text=f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ1', callback_data='nnpp'), InlineKeyboardButton(text=f'>>>', callback_data='sled_str_stud_2')]))
				else:
					stud_list.append([InlineKeyboardButton(text=f'–í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ üîπ', callback_data='sled_stud'), InlineKeyboardButton(text=f'–î–æ–ª–∂–Ω–∏–∫–∏ üò°', callback_data='dolg')])
		stud_users = InlineKeyboardMarkup(inline_keyboard=stud_list)
		await bot.send_message(chat_id=message.from_user.id, text=f'(–µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫–æ–≥–æ-—Ç–æ —É—á–µ–Ω–∏–∫–∞, –∑–∞–ø–æ–º–Ω–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ üîπ)\n\n–í—Å–µ –≤–∞—à–∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∏:', reply_markup=stud_users)
	else:
		await bot.send_message(chat_id=message.from_user.id, text=f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.')

async def clon_my_students(call):
	res = sqlite_db.sql_my_students(call.from_user.id)
	stud_list = []
	count = 0
	for i in res[1]:
		count += 1
		stud_list.append([InlineKeyboardButton(text=f'{count}. {str(i)[2:-3]}', callback_data=str(i)[2:-3])])
		if len(res[1]) == count:
			if res[2] == 1:
				stud_list.append([InlineKeyboardButton(text=f'–í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ üîπ', callback_data='sled_stud'), InlineKeyboardButton(text=f'–î–æ–ª–∂–Ω–∏–∫–∏ üò°', callback_data='dolg')])
				stud_list.append(([InlineKeyboardButton(text=f' ', callback_data='nnpp'), InlineKeyboardButton(text=f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ1', callback_data='nnpp'), InlineKeyboardButton(text=f'>>>', callback_data='sled_str_stud_2')]))
			else:
				stud_list.append([InlineKeyboardButton(text=f'–í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ üîπ', callback_data='sled_stud'), InlineKeyboardButton(text=f'–î–æ–ª–∂–Ω–∏–∫–∏ üò°', callback_data='dolg')])
	stud_users = InlineKeyboardMarkup(inline_keyboard=stud_list)
	await call.message.edit_reply_markup(stud_users)


async def sled_str_stud_2(call):
	res = sqlite_db.sql_my_students_nomer_2(call.from_user.id)
	stud_list = []
	count = 10
	for i in res[1]:
		count += 1
		stud_list.append([InlineKeyboardButton(text=f'{count}. {str(i)[2:-3]}', callback_data=str(i)[2:-3])])
		if int(len(res[1]))+10 == count:
			if res[2] == 1:
				stud_list.append([InlineKeyboardButton(text=f'–í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ üîπ', callback_data='sled_stud'), InlineKeyboardButton(text=f'–î–æ–ª–∂–Ω–∏–∫–∏ üò°', callback_data='dolg')])
				stud_list.append(([InlineKeyboardButton(text=f'<<<', callback_data='clon_my_students'), InlineKeyboardButton(text=f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ2', callback_data='nnpp'), InlineKeyboardButton(text=f'>>>', callback_data='sled_str_stud_3')]))
			else:
				stud_list.append([InlineKeyboardButton(text=f'–í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ üîπ', callback_data='sled_stud'), InlineKeyboardButton(text=f'–î–æ–ª–∂–Ω–∏–∫–∏ üò°', callback_data='dolg')])
				stud_list.append(([InlineKeyboardButton(text=f'<<<', callback_data='clon_my_students'), InlineKeyboardButton(text=f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ2', callback_data='nnpp'), InlineKeyboardButton(text=f' ', callback_data='nnpp')]))
	stud_users = InlineKeyboardMarkup(inline_keyboard=stud_list)
	await call.message.edit_reply_markup(stud_users)


async def sled_str_stud_3(call):
	res = sqlite_db.sql_my_students_nomer_3(call.from_user.id)
	stud_list = []
	count = 20
	for i in res[1]:
		count += 1
		stud_list.append([InlineKeyboardButton(text=f'{count}. {str(i)[2:-3]}', callback_data=str(i)[2:-3])])
		if int(len(res[1]))+20 == count:
			if res[2] == 1:
				stud_list.append([InlineKeyboardButton(text=f'–í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ üîπ', callback_data='sled_stud'), InlineKeyboardButton(text=f'–î–æ–ª–∂–Ω–∏–∫–∏ üò°', callback_data='dolg')])
				stud_list.append(([InlineKeyboardButton(text=f'<<<', callback_data='sled_str_stud_2'), InlineKeyboardButton(text=f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ3', callback_data='nnpp'), InlineKeyboardButton(text=f'>>>', callback_data='sled_str_stud_4')]))
			else:
				stud_list.append([InlineKeyboardButton(text=f'–í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ üîπ', callback_data='sled_stud'), InlineKeyboardButton(text=f'–î–æ–ª–∂–Ω–∏–∫–∏ üò°', callback_data='dolg')])
				stud_list.append(([InlineKeyboardButton(text=f'<<<', callback_data='sled_str_stud_2'), InlineKeyboardButton(text=f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ3', callback_data='nnpp'), InlineKeyboardButton(text=f' ', callback_data='nnpp')]))
	stud_users = InlineKeyboardMarkup(inline_keyboard=stud_list)
	await call.message.edit_reply_markup(stud_users)


async def sled_str_stud_4(call):
	res = sqlite_db.sql_my_students_nomer_4(call.from_user.id)
	stud_list = []
	count = 30
	for i in res[1]:
		count += 1
		stud_list.append([InlineKeyboardButton(text=f'{count}. {str(i)[2:-3]}', callback_data=str(i)[2:-3])])
		if int(len(res[1]))+30 == count:
			if res[2] == 1:
				stud_list.append([InlineKeyboardButton(text=f'–í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ üîπ', callback_data='sled_stud'), InlineKeyboardButton(text=f'–î–æ–ª–∂–Ω–∏–∫–∏ üò°', callback_data='dolg')])
				stud_list.append(([InlineKeyboardButton(text=f'<<<', callback_data='sled_str_stud_3'), InlineKeyboardButton(text=f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ4', callback_data='nnpp'), InlineKeyboardButton(text=f'>>>', callback_data='sled_str_stud_5')]))
			else:
				stud_list.append([InlineKeyboardButton(text=f'–í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ üîπ', callback_data='sled_stud'), InlineKeyboardButton(text=f'–î–æ–ª–∂–Ω–∏–∫–∏ üò°', callback_data='dolg')])
				stud_list.append(([InlineKeyboardButton(text=f'<<<', callback_data='sled_str_stud_3'), InlineKeyboardButton(text=f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ4', callback_data='nnpp'), InlineKeyboardButton(text=f' ', callback_data='nnpp')]))
	stud_users = InlineKeyboardMarkup(inline_keyboard=stud_list)
	await call.message.edit_reply_markup(stud_users)


async def sled_str_stud_5(call):
	res = sqlite_db.sql_my_students_nomer_5(call.from_user.id)
	stud_list = []
	count = 40
	for i in res[1]:
		count += 1
		stud_list.append([InlineKeyboardButton(text=f'{count}. {str(i)[2:-3]}', callback_data=str(i)[2:-3])])
		if int(len(res[1]))+40 == count:
			stud_list.append([InlineKeyboardButton(text=f'–í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ üîπ', callback_data='sled_stud'), InlineKeyboardButton(text=f'–î–æ–ª–∂–Ω–∏–∫–∏ üò°', callback_data='dolg')])
			stud_list.append(([InlineKeyboardButton(text=f'<<<', callback_data='sled_str_stud_4'), InlineKeyboardButton(text=f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ5', callback_data='nnpp'), InlineKeyboardButton(text=f' ', callback_data='nnpp')]))
	stud_users = InlineKeyboardMarkup(inline_keyboard=stud_list)
	await call.message.edit_reply_markup(stud_users)


#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
async def sled_stud(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚ôªÔ∏è', callback_data='nnpp')))
	await bot.send_message(chat_id=call.from_user.id, text='–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞:', reply_markup=ReplyKeyboardRemove())
	await FSMAdmChoiceYch.user.set()

async def AdmChoiceYch(message : types.Message, state: FSMContext):
	if str(message.text).isdigit() == True:
		user_list = sqlite_db.user_list_for_admin(message.from_user.id)
		if int(message.text) <= len(user_list) and int(message.text) > 0:
			my_user = user_list[int(message.text)-1]
			async with state.proxy() as data:
				data['user_id'] = message.from_user.id
				data['name'] = my_user[0]
				data['clock'] = my_user[1]
				data['callendar'] = '-'
				data['status_sum'] = 'admin_redact'
			await sqlite_db.new_redact_for_admin(message.from_user.id, state)
			await state.finish()
			await bot.send_message(chat_id=message.from_user.id, text=f'‚úÖ', reply_markup=kb_admin)
			await bot.send_message(chat_id=message.from_user.id, text=f'–í—ã –∑–∞—à–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞ - {my_user[1]}, \nB—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è c –Ω–∏–º:', reply_markup=choise_user_keyboard)
		else:
			await bot.send_message(chat_id=message.from_user.id, text='–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑:')
	else:
		await bot.send_message(chat_id=message.from_user.id, text='–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ (–ø—Ä–∏–º–µ—Ä "5"):')



async def mess_user_check_adm_panel(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚ôªÔ∏è', callback_data='nnpp')))
	await bot.send_message(chat_id=call.from_user.id, text='–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É:\n(–µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ "–æ—Ç–º–µ–Ω–∞")', reply_markup=ReplyKeyboardRemove())
	await FSMAdmMesYch.user.set()

async def AdmMesYch(message : types.Message, state: FSMContext):
	usr = sqlite_db.admin_redact_user(message.from_user.id)
	if message.text == '–æ—Ç–º–µ–Ω–∞':
		await bot.send_message(chat_id=message.from_user.id, text='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=kb_admin)
		await state.finish()
		await bot.send_message(chat_id=message.from_user.id, text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—á–µ–Ω–∏–∫–∞ - {usr[1]}, \nB—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è c –Ω–∏–º:', reply_markup=choise_user_keyboard)
	else:
		await bot.send_message(chat_id=message.from_user.id, text=f'‚úÖ', reply_markup=kb_admin)
		await bot.send_message(chat_id=message.from_user.id, text=f'C–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–µ–Ω–∏–∫—É\n{usr[1]}!\nB—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è c –Ω–∏–º:', reply_markup=choise_user_keyboard)
		await bot.send_message(chat_id=usr[0], text=f'–í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è:\n"{str(message.text)}"', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data='mess_to_admin')))
		await state.finish()


#–æ—Ç–≤–µ—Ç–∏—Ç—å –∞–¥–º–∏–Ω—É
async def mess_to_admin(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚ôªÔ∏è', callback_data='nnpp')))
	await bot.send_message(chat_id=call.from_user.id, text='–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å —É—á–∏—Ç–µ–ª—é, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏:', reply_markup=ReplyKeyboardRemove())
	await FSMAnswerAdminMessage.user.set()

async def AnswerAdminMessage(message : types.Message, state: FSMContext):
	adm = sqlite_db.sql_admin_name()
	name = sqlite_db.get_name(message.from_user.id)
	await bot.send_message(chat_id=int(str(adm)[2:-3]), text=f'–í–∞–º –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {str(name)[2:-3]}:\n"{str(message.text)}"')
	await bot.send_message(chat_id=message.from_user.id, text='–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—é!', reply_markup=kb_client)
	await state.finish()



async def rasp_users_check(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚ôªÔ∏è', callback_data='nnpp')))
	



#user panel lessons - (3)

async def my_lessons_command(message : types.Message):
	#await sqlite_db.sql_got_les(message.from_user.id)
	k = 0
	count_dpl = int(str(sqlite_db.sql_sum_dnt_pay_les(message.from_user.id))[1:-2])

	if count_dpl > 0:
		all_payment = sqlite_db.sql_auto_pay(message.from_user.id)
		ind_c = int(str(all_payment[0])[2:-3])
		gr_c = int(str(all_payment[1])[2:-3])
		ost = int(str(all_payment[2])[1:-2])
		while ost >= (ind_c or gr_c):
			if ind_c <= ost:
				sqlite_db.sql_solopay_ind(message.from_user.id)
				ost -= ind_c
			else:
				ost = 0
	user_lessons_list2 = sqlite_db.sql_lesson_list(message.from_user.id)
	user_lessons_button_list2 = []
	for item in list(reversed(user_lessons_list2)):
		user_lessons_button_list2.append([InlineKeyboardButton(text="["+str(item)[2:12]+"] - ("+str(item)[16:21]+") "+str(item)[-3:-2], callback_data=str(item))])
		k += 1
		if len(user_lessons_list2) == k:
			user_lessons_button_list2.append([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>', callback_data='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>')])
			user_lessons_button_list2.append([InlineKeyboardButton(text='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üß©', callback_data='dop_func')])
	if not user_lessons_list2:
		user_lessons_button_list2.append([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>', callback_data='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>')])
	lessons_user2 = InlineKeyboardMarkup(inline_keyboard=user_lessons_button_list2, row_width=1)
	await message.answer(text='‚ôªÔ∏è', reply_markup=kb_client)
	await message.answer(text='–ó–¥–µ—Å—å –≤–∏–¥–Ω—ã –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è —Å —É—á–∏—Ç–µ–ª–µ–º\n(–∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏):', reply_markup=lessons_user2)


#–¥–æ–ø —Ñ—É–Ω–∫—Ü–∏–∏
async def dop_func_lesson(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='–ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ üí≥', callback_data="trans")).add(InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚öôÔ∏è', callback_data="redactor_rasp")).add(InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data="back_to_lesson")))


#–æ–ø–ª–∞—Ç—ã —Ö—É–π
async def transaction(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='üåÄ', callback_data="//waiting//")))
	prov = sqlite_db.idprov_user(call.from_user.id)
	if prov[0] == 1:
		les_list = sqlite_db.sql_transaction_list(call.from_user.id)
	else:
		les_list = sqlite_db.sql_transaction_list((prov[1])[0])
	ind_cost = str(sqlite_db.ind_cost())[2:-3]
	pay_str = ""
	status_payment = ""
	pay_info = ""
	kk = 1
	for i in les_list:
		if i[3] == 'üü¢':
			status_payment = '–æ–ø–ª–∞—á–µ–Ω–æ ‚úÖ'
			pay_info = f'–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: {str(str(i[2]).split()[1])[:-1]}\n'
		else:
			status_payment = '–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ ‚òë'
			pay_info = ''
		pay_str += f'üîò –£—Ä–æ–∫ ‚Ññ: {str(kk)}\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: [{str(i[0])}] - ({str(i[1])})\n–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {status_payment}\n{pay_info}\n'
		kk += 1
	if prov[0] == 1:
		await bot.send_message(chat_id=call.from_user.id, text=f'–ó–¥–µ—Å—å –≤–∏–¥–Ω—ã –≤—Å–µ –≤–∞—à–∏ –æ–ø–ª–∞—Ç—ã, \
			\n—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ\n –∑–∞–Ω—è—Ç–∏—è - {ind_cost} ‚ÇΩ.\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ, \
			\n–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –∏ \n–≤–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–Ω—è—Ç–∏—è:\n______________________________________\n\
			\n{pay_str}', reply_markup=InlineKeyboardMarkup().row(InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='s_dop_func_double'), InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫', callback_data='check_payment_look')))
	else:
		await bot.send_message(chat_id=call.from_user.id, text=f'–ó–¥–µ—Å—å –≤–∏–¥–Ω—ã –≤—Å–µ –æ–ø–ª–∞—Ç—ã —É—á–µ–Ω–∏–∫–∞ - \
			\n{(prov[1])[1]}\n—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ\n –∑–∞–Ω—è—Ç–∏—è - {ind_cost} ‚ÇΩ.\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ, \
			\n–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –∏ \n–≤–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–Ω—è—Ç–∏—è:\n______________________________________\n\
			\n{pay_str}', reply_markup=InlineKeyboardMarkup().row(InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='s_dop_func_double'), InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫', callback_data='check_payment_look')))
	


async def look_at_chek(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='üåÄ', callback_data="//waiting//")))
	pro = sqlite_db.idprov_user(call.from_user.id)
	if pro[0] == 1:
		les_list = sqlite_db.sql_transaction_list_check(call.from_user.id)
	else:
		les_list = sqlite_db.sql_transaction_list_check((pro[1])[0])
	if len(les_list) > 0:
		ind_cost = str(sqlite_db.ind_cost())[2:-3]
		pay_str = ""
		status_payment = ""
		pay_info = ""
		kk = 1
		for i in les_list:
			if i[3] == 'üü¢':
				status_payment = '–æ–ø–ª–∞—á–µ–Ω–æ ‚úÖ'
				pay_info = f'–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: {str(str(i[2]).split()[1])[:-1]}\n'
			pay_str += f'üîò –£—Ä–æ–∫ ‚Ññ: {str(kk)}\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: [{str(i[0])}] - ({str(i[1])})\n–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {status_payment}\n{pay_info}\n'
			kk += 1
		await bot.send_message(chat_id=call.from_user.id, text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä–æ–π),\n–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –Ω–∏–∂–µ:\n______________________________________\n\n{pay_str}', reply_markup=ReplyKeyboardRemove())
		await FSMCheckList.num.set()
	else:
		await bot.send_message(chat_id=call.from_user.id, text=f'–£ –≤–∞—Å –Ω–µ—Ç –æ–ø–ª–∞—á–µ–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º üß©', callback_data='trans')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤ üéì', callback_data='back_to_lesson')))

async def check_check_kek(message: types.Message, state: FSMContext):
	if str(message.text).isdigit() == True:
		pro = sqlite_db.idprov_user(message.from_user.id)
		if pro[0] == 1:
			les_list = sqlite_db.sql_transaction_list_check(message.from_user.id)
		else:
			les_list = sqlite_db.sql_transaction_list_check((pro[1])[0])
		if len(les_list) < int(message.text):
			await bot.send_message(chat_id=message.from_user.id, text='–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
		else:
			k = 1
			for i in les_list:
				if int(message.text) == k:
					await bot.send_document(chat_id=message.from_user.id, document=str(str(i[2]).split()[2])[:-1], caption=f'–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞ {str(str(i[2]).split()[1])[:-1]}', reply_markup=kb_client)
					await state.finish()
					await bot.send_message(chat_id=message.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤ üéì', callback_data='back_to_lesson')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º üß©', callback_data='trans')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —á–µ–∫–∞–º üìÑ', callback_data='check_payment_look')))
				k += 1
	else:
		await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')



async def redactor_lesson(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='üåÄ', callback_data="//waiting//")))
	idu = sqlite_db.idprov_user(call.from_user.id)
	if idu[0] == 1:
		les_list = sqlite_db.sql_transaction_list(call.from_user.id)
	else:
		les_list = sqlite_db.sql_transaction_list((idu[1])[0])
	if len(les_list) > 0:
		pay_str = ""
		kk = 1
		for i in les_list:
			pay_str += f'üîò –£—Ä–æ–∫ ‚Ññ: {str(kk)}\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: [{str(i[0])}] - ({str(i[1])})\n\n'
			kk += 1
		await bot.send_message(chat_id=call.from_user.id, text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –¥–ª—è \n—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ \n–≤–∏–¥–µ—Ç—å –Ω–∏–∂–µ:\n\n|—Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä–æ–π|\n|–≤—Å–µ –æ–ø–ª–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è|\n|–≤–≤–µ–¥–∏—Ç–µ ["–ù–µ—Ç"/"–Ω–µ—Ç"/"No"/"no"] –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è|\n______________________________________\n\n{pay_str}', reply_markup=ReplyKeyboardRemove())
		await FSMRedactorLes.num.set()
	else:
		bot.send_message(chat_id=call.from_user.id, text=f'–£ –≤–∞—Å –Ω–µ—Ç –æ–ø–ª–∞—á–µ–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.')


async def redactor_lesson_num(message : types.Message, state: FSMContext):
	idu = sqlite_db.idprov_user(message.from_user.id)
	if str(message.text).isdigit() == True:
		if idu[0] == 1:
			les_list = sqlite_db.sql_transaction_list(message.from_user.id)
		else: 
			les_list = sqlite_db.sql_transaction_list((idu[1])[0])
		if len(les_list) < int(message.text):
			await bot.send_message(chat_id=message.from_user.id, text='–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
		else:
			k = 1
			for i in les_list:
				if int(message.text) == k:
					await state.finish()
					sqlite_db.sql_poof(message.from_user.id, i)
					await bot.send_message(chat_id=message.from_user.id, text=f'–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–æ–º —É—Ä–æ–∫–µ:\n.\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: *[{str(i[0])}] - ({str(i[1])})* \n.\n', reply_markup=InlineKeyboardMarkup().row(InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É', callback_data='redact_data_solo_lesson'), InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è', callback_data='time_red')).add(InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='redactor_rasp')), parse_mode="Markdown")
				k += 1
	else:
		if idu[0] == 1: 
			if str(message.text) == '–Ω–µ—Ç' or str(message.text) == '–ù–µ—Ç' or str(message.text) == 'No' or str(message.text) == 'no':
				await state.finish()
				await bot.send_message(chat_id=message.from_user.id, text='‚ôªÔ∏è', reply_markup=kb_client)
				await bot.send_message(chat_id=message.from_user.id, text='–ó–¥–µ—Å—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–∏–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –∑–∞–Ω—è—Ç–∏—è–º:', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ üí≥', callback_data="trans")).add(InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚öôÔ∏è', callback_data="redactor_rasp")).add(InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data="back_to_lesson")))
			else:
				await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
		else:
			if str(message.text) == '–Ω–µ—Ç' or str(message.text) == '–ù–µ—Ç' or str(message.text) == 'No' or str(message.text) == 'no':
				await state.finish()
				await bot.send_message(chat_id=message.from_user.id, text='‚ôªÔ∏è', reply_markup=kb_admin)
				await bot.send_message(chat_id=message.from_user.id, text=f'–ó–¥–µ—Å—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –∑–∞–Ω—è—Ç–∏—è–º —É—á–µ–Ω–∏–∫–∞ {(idu[1])[1]}:', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ üí≥', callback_data="trans")).add(InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚öôÔ∏è', callback_data="redactor_rasp")).add(InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data="back_to_lesson")))
			else:
				await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')



async def red_les_cal(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='–∏–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è...', callback_data="nnls")))
	await bot.send_message(chat_id=call.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ:', reply_markup=await DialogCalendar().start_calendar())


async def red_les_cal_an(callback_query: CallbackQuery, callback_data: dict):
	selected, date = await DialogCalendar().process_selection(callback_query, callback_data)
	idu = sqlite_db.idprov_user(callback_query.from_user.id)
	red = sqlite_db.send_admin_change_time(callback_query.from_user.id)
	if selected:
		await callback_query.message.answer(f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –¥–∞—Ç—É - {date.strftime("%d/%m/%Y")}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è ‚è±', callback_data="time_red")).add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É ‚öôÔ∏è', callback_data="redactor_rasp")).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º üß©', callback_data='trans')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤ üéì', callback_data='back_to_lesson')))
		if idu[0] == 1:
		    await bot.send_message(chat_id=callback_query.from_user.id, text='‚ôªÔ∏è', reply_markup=kb_client)
		    calend = date.strftime("%d/%m/%Y")
		    await bot.send_message(chat_id=f'{int(str(red[2])[2:-3])}', text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {str(red[1])[2:-3]} \n–∏–∑–º–µ–Ω–∏–ª –¥–∞—Ç—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–∫–∞ \n—Å [{str(str(red[0])[2:].split()[1])[1:-2]}] –Ω–∞ [{calend}] - ({str(str(red[0])[2:-3].split()[0])[:-2]})')
		    await sqlite_db.chenge_calendar(callback_query.from_user.id, calend)
		else:
		    await bot.send_message(chat_id=callback_query.from_user.id, text='‚ôªÔ∏è', reply_markup=kb_admin)
		    calend = date.strftime("%d/%m/%Y")
		    await sqlite_db.adm_chenge_calendar(callback_query.from_user.id, calend, (idu[1])[0])
		    await bot.send_message(chat_id=f'{(idu[1])[0]}', text=f'–£—á–∏—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –¥–∞—Ç—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–∫–∞ \n—Å [{str(str(red[0])[2:].split()[1])[1:-2]}] –Ω–∞ [{calend}] - ({str(str(red[0])[2:-3].split()[0])[:-2]})')



async def red_les_time(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='–∏–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è...', callback_data="nnls")))
	await bot.send_message(chat_id=call.from_user.id, text='–í–ø–∏—à–∏—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (—Ç–æ–ª—å–∫–æ —á–∞—Å):', reply_markup=ReplyKeyboardRemove())
	await FSMRedTimer.num.set()

async def red1_les_time_FSM(message : types.Message, state: FSMContext):
	if str(message.text).isdigit() == True:
		if int(message.text) >= 0 and int(message.text) <= 23:
			async with state.proxy() as data:
				data['user_id'] = message.from_user.id
				if len(message.text) < 2:
					data['name'] = '0'+f'{str(message.text)}'
				else:
					data['name'] = message.text
			await FSMRedTimer.next()
			await bot.send_message(chat_id=message.from_user.id, text='–¢–µ–ø–µ—Ä—å –≤–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ –º–∏–Ω—É—Ç—ã:')
		else:
			await bot.send_message(chat_id=message.from_user.id, text='–ß–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç 0 —á–∞—Å–æ–≤ –¥–æ 23, –≤–ø–∏—à–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
	else:
		await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —á–∞—Å –∑–∞–Ω–æ–≤–æ (–ø—Ä–∏–º–µ—Ä: "12")')



async def red2_timer_last(message : types.Message, state: FSMContext):
	idu = sqlite_db.idprov_user(message.from_user.id)
	if str(message.text).isdigit() == True:
		if int(message.text) >= 0 and int(message.text) <= 59:
			async with state.proxy() as data:
				if len(message.text) < 2:
					data['clock'] = '0'+f'{str(message.text)}'
				else:
					data['clock'] = message.text
				data['callendar'] = 'no'
				data['status_sum'] = 'poof'
			red = sqlite_db.send_admin_change_time(message.from_user.id)
			if idu == 1:
				await sqlite_db.finish_clock_chenger(state, message.from_user.id)
				tm = sqlite_db.changed_tim(message.from_user.id)
				await bot.send_message(chat_id=int(str(red[2])[2:-3]), text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {str(red[1])[2:-3]} \n–∏–∑–º–µ–Ω–∏–ª –≤—Ä–µ–º—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–∫–∞ \n—Å (\
					{str(str(red[0]).split()[0])[2:-2]}) –Ω–∞ ({str(tm)[-6:-1]}),\n–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è - [{str(str(red[0]).split()[1])[1:-2]}]')
				await state.finish()
				await bot.send_message(chat_id=message.from_user.id, text=f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –≤—Ä–µ–º—è –Ω–∞ {tm} !', reply_markup=InlineKeyboardMarkup()\
					.add(InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É', callback_data='redact_data_solo_lesson'))\
					.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É ‚öôÔ∏è', callback_data="redactor_rasp"))\
					.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º üß©', callback_data='trans'))\
					.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤ üéì', callback_data='back_to_lesson')))
			else:
				await sqlite_db.finish_clock_chenger(state, message.from_user.id, (idu[1])[0])
				tm = sqlite_db.changed_tim(message.from_user.id, (idu[1])[0])
				await bot.send_message(chat_id=(idu[1])[0], text=f'–£—á–∏—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –≤—Ä–µ–º—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–∫–∞ \n—Å (\
					{str(str(red[0]).split()[0])[2:-2]}) –Ω–∞ ({str(tm)[-6:-1]}),\n–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è - [{str(str(red[0]).split()[1])[1:-2]}]')
				await state.finish()
				await bot.send_message(chat_id=message.from_user.id, text=f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –≤—Ä–µ–º—è –Ω–∞ {tm}!', reply_markup=InlineKeyboardMarkup()\
					.add(InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É', callback_data='redact_data_solo_lesson'))\
					.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É ‚öôÔ∏è', callback_data="redactor_rasp"))\
					.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º üß©', callback_data='trans'))\
					.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤ üéì', callback_data='back_to_lesson')))
		else:
			await bot.send_message(chat_id=message.from_user.id, text='–ß–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç 0 –º–∏–Ω—É—Ç –¥–æ 59, –≤–ø–∏—à–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
	else:
		await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã –∑–∞–Ω–æ–≤–æ (–ø—Ä–∏–º–µ—Ä: "35")')




async def clon_lesson1(call):
	if sqlite_db.prov_user(call.from_user.id) == 1:
		k = 0
		user_lessons_list2 = sqlite_db.sql_lesson_list(call.from_user.id)
		user_lessons_button_list2 = []
		for item in list(reversed(user_lessons_list2)):
			user_lessons_button_list2.append([InlineKeyboardButton(text="["+str(item)[2:12]+"] - ("+str(item)[16:21]+") "+str(item)[-3:-2], callback_data=str(item))])
			k += 1
			if len(user_lessons_list2) == k:
				user_lessons_button_list2.append([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>', callback_data='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>')])
				user_lessons_button_list2.append([InlineKeyboardButton(text='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üß©', callback_data='dop_func')])
		if not user_lessons_list2:
			user_lessons_button_list2.append([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>', callback_data='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>')])
		lessons_user2 = InlineKeyboardMarkup(inline_keyboard=user_lessons_button_list2, row_width=1)
		await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='üåÄ', callback_data='//waiting//')))
		await bot.send_message(chat_id=call.from_user.id, text='–ó–¥–µ—Å—å –≤–∏–¥–Ω—ã –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è —Å —É—á–∏—Ç–µ–ª–µ–º\n(–∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏):', reply_markup=lessons_user2)
	else:
		id_y = sqlite_db.idusers(call.from_user.id)
		k = 0
		user_lessons_list2 = sqlite_db.sql_lesson_list(id_y[0])
		user_lessons_button_list2 = []
		for item in list(reversed(user_lessons_list2)):
			user_lessons_button_list2.append([InlineKeyboardButton(text="["+str(item)[2:12]+"] - ("+str(item)[16:21]+") "+str(item)[-3:-2], callback_data=str(item))])
			k += 1
			if len(user_lessons_list2) == k:
				user_lessons_button_list2.append([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>', callback_data='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>')])
				user_lessons_button_list2.append([InlineKeyboardButton(text='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üß©', callback_data='dop_func')])
				user_lessons_button_list2.append([InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='nazadadminlists')])
		if not user_lessons_list2:
			user_lessons_button_list2.append([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>', callback_data='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>')])
			user_lessons_button_list2.append([InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='nazadadminlists')])
		lessons_user2 = InlineKeyboardMarkup(inline_keyboard=user_lessons_button_list2, row_width=1)
		await call.message.edit_reply_markup(lessons_user2)
		#await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='üåÄ', callback_data='//waiting//')))
		#await bot.send_message(chat_id=call.from_user.id, text=f'–ó–¥–µ—Å—å –≤–∏–¥–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è —Å {id_y[1]}\n(–∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏):', reply_markup=lessons_user2)
#—Ö—É–π!


async def new_lesson_user(call):
	await sqlite_db.bezop_dob_les(call.from_user.id)
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='–∏–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞...', callback_data="nnls")))
	await bot.send_message(chat_id=call.from_user.id, text="‚ôªÔ∏è", reply_markup=ReplyKeyboardRemove())
	await bot.send_message(chat_id=call.from_user.id, text="–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è: ", reply_markup=await SimpleCalendar().start_calendar())



async def new_lesson_calendar(callback_query: CallbackQuery, callback_data: dict):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É - {date.strftime("%d/%m/%Y")}', reply_markup=kb_time)
        await sqlite_db.sql_timer(callback_query.from_user.id, date.strftime("%d/%m/%Y"))


#–æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—ã


async def change_callendar(call):
	await call.message.edit_reply_markup(await SimpleCalendar().start_calendar())

async def cancel_hours(call):
	await call.message.edit_reply_markup(kb_time)

async def next_time_01(call):
	await call.message.edit_reply_markup(time_min)
	await sqlite_db.sql_hour_timer(call.from_user.id, '01')

async def next_time_02(call):
	await call.message.edit_reply_markup(time_min2)
	await sqlite_db.sql_hour_timer(call.from_user.id, '02')

async def next_time_03(call):
	await call.message.edit_reply_markup(time_min3)
	await sqlite_db.sql_hour_timer(call.from_user.id, '03')

async def next_time_04(call):
	await call.message.edit_reply_markup(time_min4)
	await sqlite_db.sql_hour_timer(call.from_user.id, '04')

async def next_time_05(call):
	await call.message.edit_reply_markup(time_min5)
	await sqlite_db.sql_hour_timer(call.from_user.id, '05')

async def next_time_06(call):
	await call.message.edit_reply_markup(time_min6)
	await sqlite_db.sql_hour_timer(call.from_user.id, '06')

async def next_time_07(call):
	await call.message.edit_reply_markup(time_min7)
	await sqlite_db.sql_hour_timer(call.from_user.id, '07')

async def next_time_08(call):
	await call.message.edit_reply_markup(time_min8)
	await sqlite_db.sql_hour_timer(call.from_user.id, '08')

async def next_time_09(call):
	await call.message.edit_reply_markup(time_min9)
	await sqlite_db.sql_hour_timer(call.from_user.id, '09')

async def Rnext_time_10(call):
	await call.message.edit_reply_markup(Rtime_min10)
	await sqlite_db.sql_hour_timer(call.from_user.id, '10')

async def Rnext_time_11(call):
	await call.message.edit_reply_markup(Rtime_min11)
	await sqlite_db.sql_hour_timer(call.from_user.id, '11')

async def Rnext_time_12(call):
	await call.message.edit_reply_markup(Rtime_min12)
	await sqlite_db.sql_hour_timer(call.from_user.id, '12')

async def Rnext_time_13(call):
	await call.message.edit_reply_markup(Rtime_min13)
	await sqlite_db.sql_hour_timer(call.from_user.id, '13')

async def Rnext_time_14(call):
	await call.message.edit_reply_markup(Rtime_min14)
	await sqlite_db.sql_hour_timer(call.from_user.id, '14')

async def Rnext_time_15(call):
	await call.message.edit_reply_markup(Rtime_min15)
	await sqlite_db.sql_hour_timer(call.from_user.id, '15')

async def Rnext_time_16(call):
	await call.message.edit_reply_markup(Rtime_min16)
	await sqlite_db.sql_hour_timer(call.from_user.id, '16')

async def Rnext_time_17(call):
	await call.message.edit_reply_markup(Rtime_min17)
	await sqlite_db.sql_hour_timer(call.from_user.id, '17')

async def Rnext_time_18(call):
	await call.message.edit_reply_markup(Rtime_min18)
	await sqlite_db.sql_hour_timer(call.from_user.id, '18')

async def Rnext_time_19(call):
	await call.message.edit_reply_markup(Rtime_min19)
	await sqlite_db.sql_hour_timer(call.from_user.id, '19')

async def next_time_20(call):
	await call.message.edit_reply_markup(time_min20)
	await sqlite_db.sql_hour_timer(call.from_user.id, '20')

async def next_time_21(call):
	await call.message.edit_reply_markup(time_min21)
	await sqlite_db.sql_hour_timer(call.from_user.id, '21')

async def next_time_22(call):
	await call.message.edit_reply_markup(time_min22)
	await sqlite_db.sql_hour_timer(call.from_user.id, '22')

async def next_time_23(call):
	await call.message.edit_reply_markup(time_min23)
	await sqlite_db.sql_hour_timer(call.from_user.id, '23')

async def next_time_00(call):
	await call.message.edit_reply_markup(time_min00)
	await sqlite_db.sql_hour_timer(call.from_user.id, '00')

#–æ—Ç–≤–µ—Ç—ã –Ω–∞ –º–∏–Ω—É—Ç—ã

async def change_all_time(call):
	await call.message.edit_reply_markup(kb_time)

async def next_min(call):
	await sqlite_db.sql_min_timer(call.from_user.id, ':00')
	r = sqlite_db.sql_timer_insert(call.from_user.id)
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è - {str(r)[2:-3]}', callback_data="ttmm")).row(InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ', callback_data="sum_status"), InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data="change_all_time")))

async def next_min2(call):
	await sqlite_db.sql_min_timer(call.from_user.id, ':05')
	r = sqlite_db.sql_timer_insert(call.from_user.id)
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è - {str(r)[2:-3]}', callback_data="ttmm")).row(InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ', callback_data="sum_status"), InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data="change_all_time")))

async def next_min3(call):
	await sqlite_db.sql_min_timer(call.from_user.id, ':10')
	r = sqlite_db.sql_timer_insert(call.from_user.id)
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è - {str(r)[2:-3]}', callback_data="ttmm")).row(InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ', callback_data="sum_status"), InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data="change_all_time")))

async def next_min4(call):
	await sqlite_db.sql_min_timer(call.from_user.id, ':15')
	r = sqlite_db.sql_timer_insert(call.from_user.id)
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è - {str(r)[2:-3]}', callback_data="ttmm")).row(InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ', callback_data="sum_status"), InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data="change_all_time")))

async def next_min5(call):
	await sqlite_db.sql_min_timer(call.from_user.id, ':20')
	r = sqlite_db.sql_timer_insert(call.from_user.id)
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è - {str(r)[2:-3]}', callback_data="ttmm")).row(InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ', callback_data="sum_status"), InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data="change_all_time")))

async def next_min6(call):
	await sqlite_db.sql_min_timer(call.from_user.id, ':25')
	r = sqlite_db.sql_timer_insert(call.from_user.id)
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è - {str(r)[2:-3]}', callback_data="ttmm")).row(InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ', callback_data="sum_status"), InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data="change_all_time")))

async def next_min7(call):
	await sqlite_db.sql_min_timer(call.from_user.id, ':30')
	r = sqlite_db.sql_timer_insert(call.from_user.id)
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è - {str(r)[2:-3]}', callback_data="ttmm")).row(InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ', callback_data="sum_status"), InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data="change_all_time")))

async def next_min8(call):
	await sqlite_db.sql_min_timer(call.from_user.id, ':35')
	r = sqlite_db.sql_timer_insert(call.from_user.id)
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è - {str(r)[2:-3]}', callback_data="ttmm")).row(InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ', callback_data="sum_status"), InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data="change_all_time")))

async def next_min9(call):
	await sqlite_db.sql_min_timer(call.from_user.id, ':40')
	r = sqlite_db.sql_timer_insert(call.from_user.id)
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è - {str(r)[2:-3]}', callback_data="ttmm")).row(InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ', callback_data="sum_status"), InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data="change_all_time")))

async def next_min10(call):
	await sqlite_db.sql_min_timer(call.from_user.id, ':45')
	r = sqlite_db.sql_timer_insert(call.from_user.id)
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è - {str(r)[2:-3]}', callback_data="ttmm")).row(InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ', callback_data="sum_status"), InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data="change_all_time")))

async def next_min11(call):
	await sqlite_db.sql_min_timer(call.from_user.id, ':50')
	r = sqlite_db.sql_timer_insert(call.from_user.id)
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è - {str(r)[2:-3]}', callback_data="ttmm")).row(InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ', callback_data="sum_status"), InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data="change_all_time")))

async def next_min12(call):
	await sqlite_db.sql_min_timer(call.from_user.id, ':55')
	r = sqlite_db.sql_timer_insert(call.from_user.id)
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è - {str(r)[2:-3]}', callback_data="ttmm")).row(InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ', callback_data="sum_status"), InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data="change_all_time")))


async def callback_gotovo_lesson(call):
	r = sqlite_db.sql_zanyato_time(call.from_user.id)
	if r == 'no':
		adm = sqlite_db.prov_user(call.from_user.id)
		if adm == 1:
			await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚úÖ', callback_data="got")))
			await sqlite_db.sql_got_les(call.from_user.id)
			k = 0
			count_dpl = int(str(sqlite_db.sql_sum_dnt_pay_les(call.from_user.id))[1:-2])
			if count_dpl > 0:
				all_payment = sqlite_db.sql_auto_pay(call.from_user.id)
				ind_c = int(str(all_payment[0])[2:-3])
				gr_c = int(str(all_payment[1])[2:-3])
				ost = int(str(all_payment[2])[1:-2])
				while ost >= (ind_c or gr_c):
					if ind_c <= ost:
						sqlite_db.sql_solopay_ind(call.from_user.id)
						ost -= ind_c
					else:
						ost = 0
			user_lessons_list2 = sqlite_db.sql_lesson_list(call.from_user.id)
			user_lessons_button_list2 = []
			for item in list(reversed(user_lessons_list2)):
				user_lessons_button_list2.append([InlineKeyboardButton(text="["+str(item)[2:12]+"] - ("+str(item)[16:21]+") "+str(item)[-3:-2], callback_data=str(item))])
				k += 1
				if len(user_lessons_list2) == k:
					user_lessons_button_list2.append([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>', callback_data='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>')])
					user_lessons_button_list2.append([InlineKeyboardButton(text='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üß©', callback_data='dop_func')])
			if not user_lessons_list2:
				user_lessons_button_list2.append([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>', callback_data='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>')])
			lessons_user2 = InlineKeyboardMarkup(inline_keyboard=user_lessons_button_list2, row_width=1)
			await call.message.answer(text='‚ôªÔ∏è', reply_markup=kb_client)
			await call.message.answer(text='–ó–¥–µ—Å—å –≤–∏–¥–Ω—ã –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è —Å —É—á–∏—Ç–µ–ª–µ–º\n(–∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏):', reply_markup=lessons_user2)
		else:
			await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚úÖ', callback_data="got")))
			await sqlite_db.sql_got_les_admin(call.from_user.id)
			id_y = sqlite_db.idusers(call.from_user.id)
			k = 0
			user_lessons_list2 = sqlite_db.sql_lesson_list(id_y[0])
			user_lessons_button_list2 = []
			for item in list(reversed(user_lessons_list2)):
				user_lessons_button_list2.append([InlineKeyboardButton(text="["+str(item)[2:12]+"] - ("+str(item)[16:21]+") "+str(item)[-3:-2], callback_data=str(item))])
				k += 1
				if len(user_lessons_list2) == k:
					user_lessons_button_list2.append([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>', callback_data='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>')])
					user_lessons_button_list2.append([InlineKeyboardButton(text='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üß©', callback_data='dop_func')])
					user_lessons_button_list2.append([InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='nazadadminlists')])
			if not user_lessons_list2:
				user_lessons_button_list2.append([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>', callback_data='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>')])
				user_lessons_button_list2.append([InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='nazadadminlists')])
			lessons_user2 = InlineKeyboardMarkup(inline_keyboard=user_lessons_button_list2, row_width=1)
			await call.message.answer(text='‚ôªÔ∏è', reply_markup=kb_admin)
			await bot.send_message(chat_id=call.from_user.id, text=f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —É—Ä–æ–∫ —É—á–µ–Ω–∏–∫—É {id_y[1]}!', reply_markup=(lessons_user2))
			await bot.send_message(chat_id=id_y[0], text=f'–£—á–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª –≤–∞–º –Ω–æ–≤—ã–π —É—Ä–æ–∫!\n–ï–≥–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ".')
	else:
		await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='üö´', callback_data="nononono")))
		await call.message.answer(text='–¢–∞–∫–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç—ã, –≤—ã–±–µ—Ä–∏ –∑–∞–Ω–æ–≤–æ!', reply_markup=await SimpleCalendar().start_calendar())
#!—Ö—É–π


# user panel payment (4)

#–ø—Ä–æ–≤–µ—Ä–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
async def command_test(message : types.Message):
	idu = sqlite_db.idprov_user(message.from_user.id)
	await bot.send_message(chat_id=message.from_user.id, text=f'{idu[0]}')




async def command_payment(message : types.Message):
	k = 0
	user_payment_list = sqlite_db.sql_payment_list(message.from_user.id)
	user_payment_button_list = []
	for item in list(reversed(user_payment_list)):						
		user_payment_button_list.append([InlineKeyboardButton(text="{"+str((str(item)[2:-2].split())[1])[1:-1]+" ‚ÇΩ} - ["+str((str(item)[2:-2].split())[2])[:-2]+"] "+str(item)[-3:-2], callback_data=str(item))])
		k += 1
		if len(user_payment_list) == k:
			user_payment_button_list.append([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É >>>', callback_data='–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É >>>')])
			user_payment_button_list.append([InlineKeyboardButton(text='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üß©', callback_data='dop_pay_function')])
	if not user_payment_list:
		user_payment_button_list.append([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É >>>', callback_data='–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É >>>')])
	payment_user = InlineKeyboardMarkup(inline_keyboard=user_payment_button_list, row_width=1)
	await message.answer(text='üíµ', reply_markup=kb_client)
	await message.answer(text='–ó–¥–µ—Å—å –≤–∏–¥–Ω—ã –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–ª–∞—Ç—ã\n(—É–∂–µ –≤–Ω–µ—Å—ë–Ω–Ω—ã–µ):', reply_markup=payment_user)



#–¥–æ–ø —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ
async def dop_pay_function(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ üí≥', callback_data='oplata_detalno')).add(InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—ã ‚öôÔ∏è', callback_data='everyone_lesson_red_payments')).add(InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='red_payment_list')))


async def everyone_my_trans_pay(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='üåÄ', callback_data="//waiting//")))
	idu = sqlite_db.idprov_user(call.from_user.id)
	if idu == 1:
		les_list = sqlite_db.sql_payment_transaction_list(call.from_user.id)
	else:
		les_list = sqlite_db.sql_payment_transaction_list((idu[1])[0])
	if len(les_list) == 0:
		await bot.send_message(chat_id=call.from_user.id, text='–£ –≤–∞—Å –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –æ–ø–ª–∞—Ç.', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–∏–º –æ–ø–ª–∞—Ç–∞–º üí∏', callback_data='red_payment_list')))
	else:
		pay_list = sqlite_db.sql_pay_lists(call.from_user.id)
		ind_cost = str(sqlite_db.ind_cost())[2:-3]
		group_cost = str(sqlite_db.group_cost())[2:-3]
		pay_str = ""
		status_payment = ""
		pay_info = ""
		kk = 1
		count = 0
		for i in les_list:
			if i[3] == 'süü¢':
				count = 0
				pay_info = f'–ü—Ä–æ–ø–ª–∞—á–µ–Ω–æ –∑–∞: '
				status_payment = '–±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ ‚úÖ'
				prov_tich = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—á–∏—Ç–µ–ª–µ–º ‚úÖ'
				for c in pay_list:
						if i[2] == str(c[0])[:-1].split()[2]:
							count += 1
							if count == 1:
								pay_info += f'{str(c[1])}'
							else:
								pay_info += f', {str(c[1])}'
			elif i[3] == 'süü°':
				count = 0
				pay_info = f'–ü—Ä–æ–ø–ª–∞—á–µ–Ω–æ –∑–∞: '
				status_payment = f'–æ—Å—Ç–∞—Ç–æ–∫ - {i[1]} ‚ÇΩ'
				prov_tich = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—á–∏—Ç–µ–ª–µ–º ‚úÖ'
				if bool(pay_list) is True:
					for c in pay_list:
						if i[2] == str(c[0])[:-1].split()[2]:
							count += 1
							if count == 1:
								pay_info += f'{str(c[1])}'
							else:
								pay_info += f', {str(c[1])}'
				else:			
					pay_info = '–ù–µ—Ç –ø—Ä–æ–ø–ª–∞—á–µ–Ω—ã—Ö —É—Ä–æ–∫–æ–≤'
			else:
				status_payment = '–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ ‚òë'
				prov_tich = '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—á–∏—Ç–µ–ª–µ–º ‚òë'
				pay_info = ''
			pay_str += f'\nüîò –û–ø–ª–∞—Ç–∞ ‚Ññ: {str(kk)}\n–î–∞—Ç–∞ –∏ –≤–∑–Ω–æ—Å: [{str(i[0]).split()[1]}] - ({str(str(i[0]).split()[0])[:-1]} ‚ÇΩ)\n–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {status_payment}\n{prov_tich}\n{pay_info}\n'
			kk += 1
		await bot.send_message(chat_id=call.from_user.id, text=f'–ó–¥–µ—Å—å –≤–∏–¥–Ω—ã –≤—Å–µ –≤–∞—à–∏ –æ–ø–ª–∞—Ç—ã, \
			\n—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ\n –∑–∞–Ω—è—Ç–∏—è - {ind_cost} ‚ÇΩ.\n\
			—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ\n –∑–∞–Ω—è—Ç–∏—è - {group_cost} ‚ÇΩ.\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ, \
			\n–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –∏ \n–≤–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–Ω—è—Ç–∏—è:\n______________________________________\
			\n{pay_str}', reply_markup=InlineKeyboardMarkup().row(InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='dop_pay_function'), InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫', callback_data='send_check_payment')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ "–ú–æ–∏ –æ–ø–ª–∞—Ç—ã üí∏"', callback_data='red_payment_list')))



async def send_check_payment(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='üåÄ', callback_data="//waiting//")))
	await bot.send_message(chat_id=call.from_user.id, text=f'–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', reply_markup=ReplyKeyboardRemove())
	await FSMCheck_pay.sym.set()



async def h_c_send_pay(message: types.Message, state: FSMContext):
	if str(message.text).isdigit() == True:
		idu = sqlite_db.idprov_user(message.from_user.id)
		if idu[0] == 1:
			les_list = sqlite_db.send_check(message.from_user.id)
		else:
			les_list = sqlite_db.send_check((idu[1])[0])
		if len(les_list) < int(message.text):
			await bot.send_message(chat_id=message.from_user.id, text='–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
		else:
			k = 1
			for i in les_list:
				if int(message.text) == k:
					if idu[0] == 1:
						await bot.send_document(chat_id=message.from_user.id, document=i[0], caption=f'–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞ {str(i[1]).split()[1]}', reply_markup=kb_client)
					else:
						await bot.send_document(chat_id=message.from_user.id, document=i[0], caption=f'–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞ {str(i[1]).split()[1]}', reply_markup=kb_admin)
					await state.finish()
					await bot.send_message(chat_id=message.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–ª–∞—Ç–∞–º üí∏', callback_data='red_payment_list')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º üß©', callback_data='oplata_detalno')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —á–µ–∫–∞–º üìÑ', callback_data='send_check_payment')))
				k += 1
	else:
		await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')


#–†–µ–¥–∞–∫—Ç–æ—Ä –æ–ø–ª–∞—Ç
async def payment_list_changer(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='üåÄ', callback_data="//waiting//")))
	idu = sqlite_db.idprov_user(call.from_user.id)
	if idu[0] == 1:
		les_list = sqlite_db.sql_payment_transaction_list(call.from_user.id)
	else:
		les_list = sqlite_db.sql_payment_transaction_list((idu[1])[0])
	if len(les_list) == 0:
		await bot.send_message(chat_id=call.from_user.id, text='–£ –≤–∞—Å –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –æ–ø–ª–∞—Ç.', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–∏–º –æ–ø–ª–∞—Ç–∞–º üí∏', callback_data='red_payment_list')))
	else:
		pay_list = sqlite_db.sql_pay_lists(call.from_user.id)
		ind_cost = str(sqlite_db.ind_cost())[2:-3]
		group_cost = str(sqlite_db.group_cost())[2:-3]
		pay_str = ""
		status_payment = ""
		pay_info = ""
		kk = 1
		count = 0
		for i in les_list:
			if i[3] == 'süü¢':
				count = 0
				pay_info = f'–ü—Ä–æ–ø–ª–∞—á–µ–Ω–æ –∑–∞: '
				status_payment = '–±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ ‚úÖ'
				prov_tich = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—á–∏—Ç–µ–ª–µ–º ‚úÖ'
				for c in pay_list:
						if i[2] == str(c[0])[:-1].split()[2]:
							count += 1
							if count == 1:
								pay_info += f'{str(c[1])}'
							else:
								pay_info += f', {str(c[1])}'
			elif i[3] == 'süü°':
				count = 0
				pay_info = f'–ü—Ä–æ–ø–ª–∞—á–µ–Ω–æ –∑–∞: '
				status_payment = f'–æ—Å—Ç–∞—Ç–æ–∫ - {i[1]} ‚ÇΩ'
				prov_tich = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—á–∏—Ç–µ–ª–µ–º ‚úÖ'
				if bool(pay_list) is True:
					for c in pay_list:
						if i[2] == str(c[0])[:-1].split()[2]:
							count += 1
							if count == 1:
								pay_info += f'{str(c[1])}'
							else:
								pay_info += f', {str(c[1])}'
				else:			
					pay_info = '–ù–µ—Ç –ø—Ä–æ–ø–ª–∞—á–µ–Ω—ã—Ö —É—Ä–æ–∫–æ–≤'
			else:
				status_payment = '–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ ‚òë'
				prov_tich = '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—á–∏—Ç–µ–ª–µ–º ‚òë'
				pay_info = ''
			pay_str += f'\nüîò –û–ø–ª–∞—Ç–∞ ‚Ññ: {str(kk)}\n–î–∞—Ç–∞ –∏ –≤–∑–Ω–æ—Å: [{str(i[0]).split()[1]}] - ({str(str(i[0]).split()[0])[:-1]} ‚ÇΩ)\n–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {status_payment}\n{prov_tich}\n{pay_info}\n'
			kk += 1
		if idu[0] == 1:
			await bot.send_message(chat_id=call.from_user.id, text=f'–ó–¥–µ—Å—å –≤–∏–¥–Ω—ã –≤—Å–µ –≤–∞—à–∏ –æ–ø–ª–∞—Ç—ã, \
				\n—á—Ç–æ–±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∑–Ω–æ—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —á–µ–∫, –≤–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–Ω—è—Ç–∏—è:\n______________________________________\
				\n{pay_str}', reply_markup=ReplyKeyboardRemove())
		else:
			await bot.send_message(chat_id=call.from_user.id, text=f'–ó–¥–µ—Å—å –≤–∏–¥–Ω—ã –≤—Å–µ –æ–ø–ª–∞—Ç—ã —É—á–µ–Ω–∏–∫–∞ {(idu[1])[1]}, \
				\n—á—Ç–æ–±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∑–Ω–æ—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —á–µ–∫, –≤–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–Ω—è—Ç–∏—è:\n______________________________________\
				\n{pay_str}', reply_markup=ReplyKeyboardRemove())
		await FSMChangePayw.first.set()
#—Ö—É–π —Å –æ–ø–ª–∞—Ç–∞–º–∏
async def what_is_chenge_payment(message : types.Message, state: FSMContext):
	if str(message.text).isdigit() == True:
		idu = sqlite_db.idprov_user(message.from_user.id)
		if idu[0] == 1:
			les_list = sqlite_db.sql_payment_transaction_list(message.from_user.id)
			if len(les_list) < int(message.text):
				await bot.send_message(chat_id=message.from_user.id, text='–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
			else:
				k = 1
				for i in les_list:
					if int(message.text) == k:
						await bot.send_message(chat_id=message.from_user.id, text='üí¥', reply_markup=kb_client)
						if i[3] != 'süî¥':
							await bot.send_document(chat_id=message.from_user.id, document=i[2], caption=f'–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞ {str(i[0]).split()[1]}, –≤–∑–Ω–æ—Å - {str(str(i[0]).split()[0])[:-1]} ‚ÇΩ', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ', callback_data='zapros_red_pay')).add(InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='everyone_lesson_red_payments')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üß©"', callback_data='dop_pay_function')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ "–ú–æ–∏ –æ–ø–ª–∞—Ç—ã üí∏"', callback_data='exelent_payment')))
						else:
							await bot.send_document(chat_id=message.from_user.id, document=i[2], caption=f'–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞ {str(i[0]).split()[1]}, –≤–∑–Ω–æ—Å - {str(str(i[0]).split()[0])[:-1]} ‚ÇΩ', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª–µ "–≤–∑–Ω–æ—Å"', callback_data='ch_p_vz')).add(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —á–µ–∫', callback_data='ch_pr_check')).add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='delete_payment')).add(InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='everyone_lesson_red_payments')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üß©"', callback_data='dop_pay_function')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ "–ú–æ–∏ –æ–ø–ª–∞—Ç—ã üí∏"', callback_data='exelent_payment')))
						await sqlite_db.sql_pooper_poo(message.from_user.id, i)
						await state.finish()
					k += 1
		else:
			les_list = sqlite_db.sql_payment_transaction_list((idu[1])[0])
			if len(les_list) < int(message.text):
				await bot.send_message(chat_id=message.from_user.id, text='–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
			else:
				k = 1
				for i in les_list:
					if int(message.text) == k:
						await bot.send_message(chat_id=message.from_user.id, text='üí¥', reply_markup=kb_admin)
						await bot.send_document(chat_id=message.from_user.id, document=i[2], caption=f'–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞ {str(i[0]).split()[1]}, –≤–∑–Ω–æ—Å - {str(str(i[0]).split()[0])[:-1]} ‚ÇΩ', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª–µ "–≤–∑–Ω–æ—Å"', callback_data='ch_p_vz')).add(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —á–µ–∫', callback_data='ch_pr_check')).add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='delete_payment')).add(InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='everyone_lesson_red_payments')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üß©"', callback_data='dop_pay_function')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ "–ú–æ–∏ –æ–ø–ª–∞—Ç—ã üí∏"', callback_data='exelent_payment')))
						await sqlite_db.sql_pooper_poo(message.from_user.id, i)
						await state.finish()
					k += 1
	else:
		await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')

#–∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã

async def zapros_red_pay(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='–æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ...', callback_data='npp')))
	time.sleep(1)
	await bot.send_message(chat_id=call.from_user.id, text='–¢–∞–∫ –∫–∞–∫ –≤–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —É—á–∏—Ç–µ–ª—è, –∏ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–∞ –∫ –∫–∞–∫–æ–º—É-—Ç–æ —É—Ä–æ–∫—É - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –æ–ø–ª–∞—Ç—É –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å. –ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–π-—Ç–æ –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–µ —Å —É—á–∏—Ç–µ–ª–µ–º –ª–∏—á–Ω–æ, –∫–∞–∫–∞—è —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º–∞:', reply_markup=ReplyKeyboardRemove())
	await FSMzapros_red_pay.zapros.set()

async def FSMzapros(message: types.Message, state: FSMContext):
	red = sqlite_db.info_red_payp(message.from_user.id)
	await bot.send_message(chat_id=int(str(red[0])[2:-3]), text=f'–í–∞–º –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è = {str(red[2])[2:-3]}\n.\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ (–≤–∑–Ω–æ—Å –∏ –¥–∞—Ç–∞): {str(red[1])[2:-3]}\n.\n–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π —É—á–µ–Ω–∏–∫–∞: "{message.text}"', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã', callback_data='zaprosymoi')))
	await state.finish()
	await bot.send_message(chat_id=message.from_user.id, text='–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å!', reply_markup=kb_client)


#—É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—á–∏—Ç–µ–ª–µ–º
async def delete_payment(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='–∏–¥—ë—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...', callback_data='npp')))
	await bot.send_message(chat_id=call.from_user.id, text='–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–± –æ–ø–ª–∞—Ç–µ?', reply_markup=InlineKeyboardMarkup().row(InlineKeyboardButton(text='–î–∞, —É–≤–µ—Ä–µ–Ω', callback_data='yes_i_did_it_delete_payment'), InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='everyone_lesson_red_payments')))


async def yes_i_did_it_delete_payment(call):
	red = sqlite_db.sql_delete_payment_xianzai(call.from_user.id)
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text=f'–û–ø–ª–∞—Ç–∞ –∑–∞ {str(red)[-10:]} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!', callback_data='npp')).add(InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='everyone_lesson_red_payments')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üß©"', callback_data='dop_pay_function')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ "–ú–æ–∏ –æ–ø–ª–∞—Ç—ã üí∏"', callback_data='exelent_payment')))


#–∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª–µ –≤–∑–Ω–æ—Å
async def ch_p_vz(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='–∏–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...', callback_data='npp')))
	await bot.send_message(chat_id=call.from_user.id, text='–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ –≤–∑–Ω–æ—Å - –≤–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏):', reply_markup=ReplyKeyboardRemove())
	await FSMch_p_vz.vznos.set()

async def vznos_new(message: types.Message, state: FSMContext):
	red = sqlite_db.send_admin_change_time(message.from_user.id) 
	if str(message.text).isdigit() == True:
		await bot.send_message(chat_id=f'{int(str(red[2])[2:-3])}', text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {str(red[1])[2:-3]} \n–∏–∑–º–µ–Ω–∏–ª —Å—É–º–º—É –æ–ø–ª–∞—á–µ–Ω–Ω—É—é –∑–∞ —É—Ä–æ–∫ \n—Å ({str(str(red[0])[2:-3].split()[0])[:-2]}) –Ω–∞ ({message.text})\n–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã - ({str(str(red[0])[2:].split()[1])[1:-2]})') 
		await sqlite_db.vznos_new(message.from_user.id, message.text)
		await bot.send_message(chat_id=message.from_user.id, text=f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Å—É–º–º—É –æ–ø–ª–∞—á–µ–Ω–Ω—É—é –∑–∞ —É—Ä–æ–∫!\n–¢–µ–ø–µ—Ä—å –≤–∞—à –≤–∑–Ω–æ—Å = {message.text} ‚ÇΩ', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª–µ "–≤–∑–Ω–æ—Å"', callback_data='ch_p_vz')).add(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —á–µ–∫', callback_data='ch_pr_check')).add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='delete_payment')).add(InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='everyone_lesson_red_payments')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üß©"', callback_data='dop_pay_function')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ "–ú–æ–∏ –æ–ø–ª–∞—Ç—ã üí∏"', callback_data='exelent_payment')))
		await state.finish()
	else:
		await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–ø—Ä–∏–º–µ—Ä - "1500"):')


#–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —á–µ–∫
async def ch_pr_check(call):
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='–∏–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...', callback_data='npp')))
	await bot.send_message(chat_id=call.from_user.id, text='–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –∫ —ç—Ç–æ–π –æ–ø–ª–∞—Ç–µ —á–µ–∫ - –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', reply_markup=ReplyKeyboardRemove())
	await FSMch_pr_check.check.set()

async def check_new(message: types.Message, state: FSMContext):
	await bot.send_message(chat_id=message.from_user.id, text='–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç –≤–æ—Ç —Ç–∞–∫:')
	doc = message.document.file_id
	time.sleep(1)
	await bot.send_document(chat_id=message.from_user.id, document=doc, caption=f'–í–∑–Ω–æ—Å –∏ –¥–∞—Ç–∞: {str(sqlite_db.obnov_check(message.from_user.id, message.document.file_id))[2:-3]}', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª–µ "–≤–∑–Ω–æ—Å"', callback_data='ch_p_vz')).add(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —á–µ–∫', callback_data='ch_pr_check')).add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='delete_payment')).add(InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='everyone_lesson_red_payments')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üß©"', callback_data='dop_pay_function')).add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ "–ú–æ–∏ –æ–ø–ª–∞—Ç—ã üí∏"', callback_data='exelent_payment')))
	await state.finish()




#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
async def callback_payment_user(call):
	await sqlite_db.bezop_dob_les(call.from_user.id)
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='–∏–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...', callback_data='npp')))
	await bot.send_message(chat_id=call.from_user.id, text='–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ —á–µ–∫ –∏–∑ –æ–Ω–ª–∞–π–Ω –±–∞–Ω–∫–∞\n(—Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏):', reply_markup=ReplyKeyboardRemove())
	await FSMPayment_new.symma.set()

async def payment_sum_sbor_and_next(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['user_id'] = message.from_user.id
		data['name'] = message.document.file_id
	await FSMPayment_new.next()
	await bot.send_message(chat_id=message.from_user.id, text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ–≤–µ–ª–∏ —É—á–∏—Ç–µ–ª—é:')

async def check_payment_user(message : types.Message, state: FSMContext):
	if str(message.text).isdigit() == True:
		async with state.proxy() as data:
			data['clock'] = message.text
			data['callendar'] = f'{message.text}, {now.strftime("%d/%m/%Y")}'
			data['status_sum'] = 'süî¥'
		await sqlite_db.new_payment_red(state)
		await state.finish()
		await bot.send_message(chat_id=message.from_user.id, text='–í—ã —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–ª–∏ –æ–ø–ª–∞—Ç—É!', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data="exelent_payment")))
	else: 
		await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - |—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã|:')



#–¥–∞–±–ª —Å–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç
async def double_payment_list(call):
	if sqlite_db.prov_user(call.from_user.id) == 1:
		await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚úÖ', callback_data='comlete_payment')))
		k = 0
		count_dpl = int(str(sqlite_db.sql_sum_dnt_pay_les(call.from_user.id))[1:-2])
		if count_dpl > 0:
			all_payment = sqlite_db.sql_auto_pay(call.from_user.id)
			ind_c = int(str(all_payment[0])[2:-3])
			gr_c = int(str(all_payment[1])[2:-3])
			ost = int(str(all_payment[2])[1:-2])
			while ost >= (ind_c or gr_c):
				if ind_c <= ost:
					sqlite_db.sql_solopay_ind(call.from_user.id)
					ost -= ind_c
				else:
					ost = 0
		user_payment_list = sqlite_db.sql_payment_list(call.from_user.id)
		user_payment_button_list = []
		for item in list(reversed(user_payment_list)):
			user_payment_button_list.append([InlineKeyboardButton(text="{"+str((str(item)[2:-2].split())[1])[1:-1]+" ‚ÇΩ} - ["+str((str(item)[2:-2].split())[2])[:-2]+"] "+str(item)[-3:-2], callback_data=str(item))])
			k += 1
			if len(user_payment_list) == k:
				user_payment_button_list.append([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É >>>', callback_data='–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É >>>')])
				user_payment_button_list.append([InlineKeyboardButton(text='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üß©', callback_data='dop_pay_function')])
		if not user_payment_list:
			user_payment_button_list.append([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É >>>', callback_data='–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É >>>')])
		payment_user = InlineKeyboardMarkup(inline_keyboard=user_payment_button_list, row_width=1)
		await call.message.answer(text='–ó–¥–µ—Å—å –≤–∏–¥–Ω—ã –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–ª–∞—Ç—ã\n(—É–∂–µ –≤–Ω–µ—Å—ë–Ω–Ω—ã–µ):', reply_markup=payment_user)
	else:
		#await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='üí∏', callback_data='nnpp')))
		id_y = sqlite_db.idusers(call.from_user.id)
		k = 0
		user_payment_list = sqlite_db.sql_payment_list(id_y[0])
		user_payment_button_list = []
		for item in list(reversed(user_payment_list)):
			user_payment_button_list.append([InlineKeyboardButton(text="{"+str((str(item)[2:-2].split())[1])[1:-1]+" ‚ÇΩ} - ["+str((str(item)[2:-2].split())[2])[:-2]+"] "+str(item)[-3:-2], callback_data=str(item))])
			k += 1
			if len(user_payment_list) == k:
				user_payment_button_list.append([InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—ã >>>', callback_data='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—ã >>>')])
				user_payment_button_list.append([InlineKeyboardButton(text='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üß©', callback_data='dop_pay_function')])
				user_payment_button_list.append([InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='nazadadminlists')])
		if not user_payment_list:
			user_payment_button_list.append([InlineKeyboardButton(text='–£ —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–ª–∞—Ç', callback_data='nnpp')])
			user_payment_button_list.append([InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='nazadadminlists')])
		payment_user = InlineKeyboardMarkup(inline_keyboard=user_payment_button_list, row_width=1)
		#await call.message.answer(text=f'–ó–¥–µ—Å—å –≤–∏–¥–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–ª–∞—Ç—ã (—É–∂–µ –≤–Ω–µ—Å—ë–Ω–Ω—ã–µ):\n—É—á–µ–Ω–∏–∫–∞ - {id_y[1]}', reply_markup=payment_user)
		await call.message.edit_reply_markup(payment_user)



async def nazadadminlists(call):
	id_y = sqlite_db.idusers(call.from_user.id)
	await call.message.edit_reply_markup(choise_user_keyboard)
	#await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚ôªÔ∏è', callback_data='nnpp')))
	#await bot.send_message(chat_id=call.from_user.id, text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—á–µ–Ω–∏–∫–∞ - {id_y[1]}, \nB—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è c –Ω–∏–º:', reply_markup=choise_user_keyboard)
#—Ö—É–π!


#–¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç
async def red_payment_list(call):
	idu = sqlite_db.idprov_user(call.from_user.id)
	if idu[0] == 1:
		k = 0
		count_dpl = int(str(sqlite_db.sql_sum_dnt_pay_les(call.from_user.id))[1:-2])
		if count_dpl > 0:
			all_payment = sqlite_db.sql_auto_pay(call.from_user.id)
			ind_c = int(str(all_payment[0])[2:-3])
			gr_c = int(str(all_payment[1])[2:-3])
			ost = int(str(all_payment[2])[1:-2])
			while ost >= (ind_c or gr_c):
				if ind_c <= ost:
					sqlite_db.sql_solopay_ind(call.from_user.id)
					ost -= ind_c
				else:
					ost = 0
		user_payment_list = sqlite_db.sql_payment_list(call.from_user.id)
		user_payment_button_list = []
		for item in list(reversed(user_payment_list)):
			user_payment_button_list.append([InlineKeyboardButton(text="{"+str((str(item)[2:-2].split())[1])[1:-1]+" ‚ÇΩ} - ["+str((str(item)[2:-2].split())[2])[:-2]+"] "+str(item)[-3:-2], callback_data=str(item))])
			k += 1
			if len(user_payment_list) == k:
				user_payment_button_list.append([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É >>>', callback_data='–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É >>>')])
				user_payment_button_list.append([InlineKeyboardButton(text='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üß©', callback_data='dop_pay_function')])
		if not user_payment_list:
			user_payment_button_list.append([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É >>>', callback_data='–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É >>>')])
		payment_user = InlineKeyboardMarkup(inline_keyboard=user_payment_button_list, row_width=1)
		await call.message.edit_reply_markup(payment_user)
	else:
		k = 0
		user_payment_list = sqlite_db.sql_payment_list((idu[1])[0])
		user_payment_button_list = []
		for item in list(reversed(user_payment_list)):
			user_payment_button_list.append([InlineKeyboardButton(text="{"+str((str(item)[2:-2].split())[1])[1:-1]+" ‚ÇΩ} - ["+str((str(item)[2:-2].split())[2])[:-2]+"] "+str(item)[-3:-2], callback_data=str(item))])
			k += 1
			if len(user_payment_list) == k:
				user_payment_button_list.append([InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—ã >>>', callback_data='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—ã >>>')])
				user_payment_button_list.append([InlineKeyboardButton(text='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üß©', callback_data='dop_pay_function')])
				user_payment_button_list.append([InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='nazadadminlists')])
		if not user_payment_list:
			user_payment_button_list.append([InlineKeyboardButton(text='–£ —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–ª–∞—Ç', callback_data='nnpp')])
			user_payment_button_list.append([InlineKeyboardButton(text='<<< –ù–∞–∑–∞–¥', callback_data='nazadadminlists')])
		payment_user = InlineKeyboardMarkup(inline_keyboard=user_payment_button_list, row_width=1)
		await call.message.edit_reply_markup(payment_user)


#helpers

#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫
async def command_pic(message : types.Message):
	if sqlite_db.sql_adm_check(message.from_user.id) == 1:
		await message.reply(text=f'–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É:'#, reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É', callback_data="download_1_pic")))
			)
		await FSMPic1.status_sum.set()
	else:
		await message.reply(text='—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–∑–æ–≤–∞ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã...')

async def load_photo(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['user_id'] = '0'
		data['name'] = '0'
		data['clock'] = '01A'
		data['callendar'] = '0'
		data['status_sum'] = message.photo[0].file_id
	await sqlite_db.sql_add_pic(state)
	await state.finish()
	await message.reply('–∫–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!')


#—Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞
async def admin_status(message : types.Message):
	if sqlite_db.sql_prov_reg(message.from_user.id) == '':
		await bot.send_message(message.from_user.id, text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã :(', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data="registration")))
	else:
		await message.reply(text='–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
		await FSMAdmstat.status_sum.set()


async def try_admin_status(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['user_id'] = message.from_user.id
	await state.finish()
	if message.text == 'admin password12':
		await bot.send_message(chat_id=message.from_user.id, text='–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è.', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–í–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data="join_admin")).add(InlineKeyboardButton(text='–í–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data="join_user")))
	else:
		await bot.send_message(chat_id=message.from_user.id, text='–ü–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–∞–≤ —Å—é–¥–∞ - /set_admin_status')


async def callback_admin_status_join(call):
	await sqlite_db.sql_chenge_stat_adm(call.from_user.id)
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='–í–æ–π—Ç–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data="join")))


async def callback_user_status_join(call):
	await sqlite_db.sql_chenge_stat_user(call.from_user.id)
	await call.message.edit_reply_markup(InlineKeyboardMarkup().add(InlineKeyboardButton(text='–í–æ–π—Ç–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data="join")))

#–¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è
async def add_pay_command(message : types.Message):
	if sqlite_db.sql_adm_check(message.from_user.id) == 1:
		await message.answer(text='–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:')
		await FSMPay_cost.cost.set()
	else:
		await message.answer(text='–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')

async def add_pay_answer(message : types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['user_id'] = 'individual cost'
		data['name'] = '0'
		data['clock'] = message.text
		data['callendar'] = '0'
		data['status_sum'] = 'üíé'
	await sqlite_db.sql_add_ind_cost(state)
	await state.finish()
	await message.answer(text=f'–¢–µ–ø–µ—Ä—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–∫–∞ - {str(sqlite_db.ind_cost())[2:-3]} ‚ÇΩ')


#–¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–µ
async def add_pay_group_command(message : types.Message):
	if sqlite_db.sql_adm_check(message.from_user.id) == 1:
		await message.answer(text='–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:')
		await FSMPay_cost_group.cost.set()
	else:
		await message.answer(text='–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')

async def add_pay_group_answer(message : types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['user_id'] = 'group cost'
		data['name'] = '0'
		data['clock'] = message.text
		data['callendar'] = '0'
		data['status_sum'] = 'üí∞'
	await sqlite_db.sql_add_group_cost(state)
	await state.finish()
	await message.answer(text=f'–¢–µ–ø–µ—Ä—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞ - {str(sqlite_db.group_cost())[2:-3]} ‚ÇΩ')


#reg handlers

def register_handlers_client(dp : Dispatcher):

#test
	dp.register_message_handler(command_test, commands='test')

#(1)

	dp.register_message_handler(commands_start, commands=['start', 'help'])
	dp.register_callback_query_handler(callback_registr, lambda c: c.data == 'registration')
	dp.register_message_handler(load_name, state=FSMReg.name)
	dp.register_callback_query_handler(callback_join, lambda c: c.data == 'join')
	dp.register_callback_query_handler(callback_change_name, lambda c: c.data == 'change_name')
	dp.register_callback_query_handler(callback_yver_change_name, lambda c: c.data == 'yes_change')
#(2)#admin
	dp.register_message_handler(my_students, lambda message: message.text == "–ú–æ–∏ —É—á–µ–Ω–∏–∫–∏ üéì")
	dp.register_callback_query_handler(clon_my_students, lambda c: c.data == 'clon_my_students')
	dp.register_callback_query_handler(sled_str_stud_2, lambda c: c.data == 'sled_str_stud_2')
	dp.register_callback_query_handler(sled_str_stud_3, lambda c: c.data == 'sled_str_stud_3')
	dp.register_callback_query_handler(sled_str_stud_4, lambda c: c.data == 'sled_str_stud_4')
	dp.register_callback_query_handler(sled_str_stud_5, lambda c: c.data == 'sled_str_stud_5')

	dp.register_callback_query_handler(sled_stud, lambda c: c.data == 'sled_stud')
	dp.register_message_handler(AdmChoiceYch, state=FSMAdmChoiceYch.user)
	dp.register_callback_query_handler(mess_user_check_adm_panel, lambda c: c.data == 'mess_user_check_adm_panel')
	dp.register_message_handler(AdmMesYch, state=FSMAdmMesYch.user)

	dp.register_callback_query_handler(mess_to_admin, lambda c: c.data == 'mess_to_admin')
	dp.register_message_handler(AnswerAdminMessage, state=FSMAnswerAdminMessage.user)

	dp.register_callback_query_handler(nazadadminlists, lambda c: c.data == 'nazadadminlists')


#(3)
	dp.register_callback_query_handler(change_callendar, lambda call: 'calendar_back' in call.data)

	dp.register_callback_query_handler(dop_func_lesson, lambda call: 'dop_func' in call.data)
	dp.register_callback_query_handler(transaction, lambda call: 'trans' in call.data)

	dp.register_message_handler(my_lessons_command, lambda message: message.text == "–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì")
	dp.register_callback_query_handler(clon_lesson1, lambda call: 'back_to_lesson' in call.data)
	dp.register_callback_query_handler(new_lesson_user, lambda c: c.data == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å >>>')
	dp.register_callback_query_handler(new_lesson_calendar, simple_cal_callback.filter())
	dp.register_callback_query_handler(look_at_chek, lambda call: 'check_payment_look' in call.data)
	dp.register_message_handler(check_check_kek, state=FSMCheckList.num)
	dp.register_callback_query_handler(redactor_lesson, lambda call: 'redactor_rasp' in call.data)
	dp.register_message_handler(redactor_lesson_num, state=FSMRedactorLes.num)
	#dp.register_callback_query_handler(back_to_dop_into_red, lambda call: 'back_to_dop_into_red' in call.data, state=FSMRedactorLes.num)

	dp.register_callback_query_handler(red_les_cal, lambda c: c.data == 'redact_data_solo_lesson')
	dp.register_callback_query_handler(red_les_cal_an, dialog_cal_callback.filter())
	dp.register_callback_query_handler(red_les_time, lambda c: c.data == 'time_red')
	dp.register_message_handler(red1_les_time_FSM, state=FSMRedTimer.num)
	dp.register_message_handler(red2_timer_last, state=FSMRedTimer.com)


	dp.register_callback_query_handler(cancel_hours, lambda call: 'back_timer' in call.data)

	dp.register_callback_query_handler(next_time_01, lambda call: 'tib1' in call.data)
	dp.register_callback_query_handler(next_time_02, lambda call: 'tib2' in call.data)
	dp.register_callback_query_handler(next_time_03, lambda call: 'tib3' in call.data)
	dp.register_callback_query_handler(next_time_04, lambda call: 'tib4' in call.data)
	dp.register_callback_query_handler(next_time_05, lambda call: 'tib5' in call.data)
	dp.register_callback_query_handler(next_time_06, lambda call: 'tib6' in call.data)
	dp.register_callback_query_handler(next_time_07, lambda call: 'tib7' in call.data)
	dp.register_callback_query_handler(next_time_08, lambda call: 'tib8' in call.data)
	dp.register_callback_query_handler(next_time_09, lambda call: 'tib9' in call.data)
	dp.register_callback_query_handler(Rnext_time_10, lambda call: 'decade_time10' in call.data)
	dp.register_callback_query_handler(Rnext_time_11, lambda call: 'decade_time11' in call.data)
	dp.register_callback_query_handler(Rnext_time_12, lambda call: 'decade_time12' in call.data)
	dp.register_callback_query_handler(Rnext_time_13, lambda call: 'decade_time13' in call.data)
	dp.register_callback_query_handler(Rnext_time_14, lambda call: 'decade_time14' in call.data)
	dp.register_callback_query_handler(Rnext_time_15, lambda call: 'decade_time15' in call.data)
	dp.register_callback_query_handler(Rnext_time_16, lambda call: 'decade_time16' in call.data)
	dp.register_callback_query_handler(Rnext_time_17, lambda call: 'decade_time17' in call.data)
	dp.register_callback_query_handler(Rnext_time_18, lambda call: 'decade_time18' in call.data)
	dp.register_callback_query_handler(Rnext_time_19, lambda call: 'decade_time19' in call.data)
	dp.register_callback_query_handler(next_time_20, lambda call: 'twenty_tis20' in call.data)
	dp.register_callback_query_handler(next_time_21, lambda call: 'twenty_tis21' in call.data)
	dp.register_callback_query_handler(next_time_22, lambda call: 'twenty_tis22' in call.data)
	dp.register_callback_query_handler(next_time_23, lambda call: 'twenty_tis23' in call.data)
	dp.register_callback_query_handler(next_time_00, lambda call: 'twenty_tis24' in call.data)

	dp.register_callback_query_handler(change_all_time, lambda call: 'change_all_time' in call.data)

	dp.register_callback_query_handler(next_min, lambda call: 'time_m00' in call.data)
	dp.register_callback_query_handler(next_min2, lambda call: 'time_m05' in call.data)
	dp.register_callback_query_handler(next_min3, lambda call: 'time_m10' in call.data)
	dp.register_callback_query_handler(next_min4, lambda call: 'time_m15' in call.data)
	dp.register_callback_query_handler(next_min5, lambda call: 'time_m20' in call.data)
	dp.register_callback_query_handler(next_min6, lambda call: 'time_m25' in call.data)
	dp.register_callback_query_handler(next_min7, lambda call: 'time_m30' in call.data)
	dp.register_callback_query_handler(next_min8, lambda call: 'time_m35' in call.data)
	dp.register_callback_query_handler(next_min9, lambda call: 'time_m40' in call.data)
	dp.register_callback_query_handler(next_min10, lambda call: 'time_m45' in call.data)
	dp.register_callback_query_handler(next_min11, lambda call: 'time_m50' in call.data)
	dp.register_callback_query_handler(next_min12, lambda call: 'time_m55' in call.data)

	dp.register_callback_query_handler(callback_gotovo_lesson, lambda call: 'sum_status' in call.data)

#(4)
	dp.register_message_handler(command_payment, lambda message: message.text == "–ú–æ–∏ –æ–ø–ª–∞—Ç—ã üí∏")
	dp.register_callback_query_handler(callback_payment_user, lambda c: c.data == '–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É >>>')
	dp.register_message_handler(payment_sum_sbor_and_next, content_types=['document'], state=FSMPayment_new.symma)
	dp.register_message_handler(check_payment_user, state=FSMPayment_new.file)
	dp.register_callback_query_handler(double_payment_list, lambda c: c.data == 'exelent_payment')
	dp.register_callback_query_handler(dop_pay_function, lambda c: c.data == 'dop_pay_function')
	dp.register_callback_query_handler(red_payment_list, lambda c: c.data == 'red_payment_list')
	dp.register_callback_query_handler(everyone_my_trans_pay, lambda c: c.data == 'oplata_detalno')
	dp.register_callback_query_handler(send_check_payment, lambda c: c.data == 'send_check_payment')
	dp.register_message_handler(h_c_send_pay, state=FSMCheck_pay.sym)
	dp.register_callback_query_handler(payment_list_changer, lambda c: c.data == 'everyone_lesson_red_payments')
	dp.register_message_handler(what_is_chenge_payment, state=FSMChangePayw.first)
	dp.register_callback_query_handler(ch_p_vz, lambda c: c.data == 'ch_p_vz')
	dp.register_message_handler(vznos_new, state=FSMch_p_vz.vznos)
	dp.register_callback_query_handler(ch_pr_check, lambda c: c.data == 'ch_pr_check')
	dp.register_message_handler(check_new, content_types=['document'], state=FSMch_pr_check.check)
	dp.register_callback_query_handler(zapros_red_pay, lambda c: c.data == 'zapros_red_pay')
	dp.register_message_handler(FSMzapros, state=FSMzapros_red_pay.zapros)
	dp.register_callback_query_handler(delete_payment, lambda c: c.data == 'delete_payment')
	dp.register_callback_query_handler(yes_i_did_it_delete_payment, lambda c: c.data == 'yes_i_did_it_delete_payment')

#helpers

#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫
	dp.register_message_handler(command_pic, commands='add_pic1')
	dp.register_message_handler(load_photo, content_types=['photo'], state=FSMPic1.status_sum)
#—Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞
	dp.register_message_handler(admin_status, commands='set_admin_status')
	dp.register_message_handler(try_admin_status, state=FSMAdmstat.status_sum)
	dp.register_callback_query_handler(callback_admin_status_join, lambda c: c.data == 'join_admin')
	dp.register_callback_query_handler(callback_user_status_join, lambda c: c.data == 'join_user')
#–¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π
	dp.register_message_handler(add_pay_command, commands='set_cost')
	dp.register_message_handler(add_pay_answer, state=FSMPay_cost.cost)

	dp.register_message_handler(add_pay_group_command, commands='set_group_cost')
	dp.register_message_handler(add_pay_group_answer, state=FSMPay_cost_group.cost)
